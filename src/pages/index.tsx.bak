// pages/index.tsx
import React from 'react';
import dynamic from 'next/dynamic';
import useTranslation from 'next-translate/useTranslation';
import type { GetStaticProps, InferGetStaticPropsType } from 'next';

import dbConnect from 'lib/dbConnect';
import HomeSlider from 'models/HomeSlider';
import Brands from 'models/Brands';
import Products from 'models/Products';
import HomeBanners from 'models/HomeBanners';
import SubCategories from 'models/SubCategories';
import CategoriesModel from 'models/Categories';

import Container from '@mui/material/Container';

import { Page } from 'src/components';
import ReadData from 'src/components/ReadData2';
import HeroCarouselSkeleton from 'src/components/skeletons/home/heroCarousel';
import BannersSkeleton from 'src/components/skeletons/home/bannersSkeleton';

// ---------- Types (adjust to your schema as needed) ----------
type Slide = Record<string, unknown>;
type Brand = Record<string, unknown>;
type Banner = Record<string, unknown>;
type SubCategory = Record<string, unknown>;
type Category = { subCategories?: SubCategory[] } & Record<string, unknown>;
type Product = { rating?: number; featured?: boolean } & Record<string, unknown>;

// ---------- Dynamic chunks ----------
const HeroCarousel = dynamic(
  () => import('src/components/carousels/heroCarousel/heroCarousel'),
  { loading: () => <HeroCarouselSkeleton /> }
) as React.ComponentType<{ isLoading?: boolean; data: Slide[] }>;

const Banners = dynamic(
  () => import('src/components/_main/home/banners'),
  { loading: () => <BannersSkeleton /> }
) as React.ComponentType<{ data: Banner[] }>;

const CategoriesCmp = dynamic(
  () => import('src/components/_main/home/categories')
) as React.ComponentType<{ categories: Category[]; t: (k: string) => string }>;

const TopCollections = dynamic(
  () => import('src/components/_main/home/topCollections')
) as React.ComponentType<{ data: Product[]; t: (k: string) => string }>;

const CenteredBanner = dynamic(
  () => import('src/components/_main/home/centeredBanner')
) as React.ComponentType<{ data: Banner[] }>;

const FeaturedProducts = dynamic(
  () => import('src/components/_main/home/featured')
) as React.ComponentType<{ data: Product[]; t: (k: string) => string }>;

const BrandsMain = dynamic(
  () => import('src/components/_main/home/brands')
) as React.ComponentType<{ data: Brand[] }>;

// ---------- SSG with ISR ----------
export const getStaticProps: GetStaticProps<{
  slidesData: Slide[];
  brandData: Brand[];
  homeBanners: Banner[];
  categories: Category[];
  featuredProducts: Product[];
  topRatedProducts: Product[];
}> = async () => {
  await dbConnect();

  const [
    slides,
    brands,
    banners,
    _subcat, // touch to warm relationship; result unused
    categories,
    featuredProducts,
    topRatedProducts,
  ] = await Promise.all([
    HomeSlider.find().lean<Slide[]>(),
    Brands.find().lean<Brand[]>(),
    HomeBanners.find({}).lean<Banner[]>(),
    SubCategories.findOne().lean<SubCategory | null>(),
    CategoriesModel.find({}).populate('subCategories').lean<Category[]>(),
    Products.find({ featured: true }).limit(8).lean<Product[]>(),
    Products.find().sort({ rating: -1 }).limit(8).lean<Product[]>(),
  ]);

  return {
    props: {
      slidesData: slides ?? [],
      brandData: brands ?? [],
      homeBanners: banners ?? [],
      categories: categories ?? [],
      featuredProducts: featuredProducts ?? [],
      topRatedProducts: topRatedProducts ?? [],
    },
    revalidate: 60,
  };
};

// ---------- Page ----------
export default function Home({
  slidesData,
  brandData,
  homeBanners,
  categories,
  featuredProducts,
  topRatedProducts,
}: InferGetStaticPropsType<typeof getStaticProps>) {
  const { t } = useTranslation('home');

  return (
    <Page
      title="全球华人首选线上游戏点卡, 购物礼品卡, 手游和直播充值直充平台"
      description="gogogm是备受全球华人信赖的线上游戏点卡，手游和直播充值平台。为全球玩家提供各种最新游戏、手游充值，游戏充值，、直播充值，游戏点卡、游戏激活码、充值卡等。可使用PayPal, 信用卡，网银，各国电子钱包支付。马上到GOGOGM购买吧！"
      canonical=""
    >
      <HeroCarousel isLoading={!slidesData?.length} data={slidesData} />
      <Banners data={homeBanners} />
      <CenteredBanner data={homeBanners} />
      <FeaturedProducts data={featuredProducts} t={t} />
      <BrandsMain data={brandData} />
      <Container>
        <CategoriesCmp categories={categories} t={t} />
        <TopCollections data={topRatedProducts} t={t} />

        {/* Optional blocks — uncomment as needed */}
        {/*  */}
        {/*  */}
        {/*  */}
        {/*  */}
      </Container>
    </Page>
  );
}
